#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W             &kp E           &kp R                   &kp T                                                                     &kp Y                &kp U  &kp I      &kp O      &kp P
&lt 2 A           &kp S             &kp D           &mt LEFT_WIN F          &kp G               &kp LS(LG(S))                &kp MINUS                &kp H                &kp J  &kp K      &kp L      &mt LC(LSHFT) SEMICOLON
&mt LEFT_SHIFT Z  &kp X             &kp C           &kp V                   &kp B               &kp LEFT_PARENTHESIS         &lt 6 RIGHT_PARENTHESIS  &kp N                &kp M  &mkp LCLK  &mkp RCLK  &lt 3 COMMA
&kp ESC           &kp INT_MUHENKAN  &kp INT_HENKAN  &lt_to_layer_0 3 ENTER  &mt LEFT_WIN SPACE  &lt_to_layer_0 3 DELETE      &mt LEFT_ALT ENTER       &mt RCTRL BACKSPACE                               &kp PERIOD
            >;

            sensor-bindings = <&inc_dec_kp PG_DN PG_UP>;
        };

        FUNCTION {
            bindings = <
&kp LC(X)  &kp LC(A)  &kp LA(N7)        &kp LA(N8)        &kp LA(N9)                                         &kp F7  &kp F8  &kp F9  &kp LS(EXCLAMATION)  &kp AT_SIGN
&kp LC(C)  &trans     &kp LA(NUMBER_4)  &kp LA(N5)        &kp LA(N6)        &trans         &kp LESS_THAN     &kp F4  &kp F5  &kp F6  &kp LEFT_BRACKET     &kp RIGHT_BRACKET
&kp LC(V)  &trans     &kp LA(NUMBER_1)  &kp LA(NUMBER_2)  &kp LA(NUMBER_3)  &kp TILDE      &kp GREATER_THAN  &kp F1  &kp F2  &kp F3  &kp COLON            &kp LS(QUESTION)
&trans     &trans     &trans            &trans            &trans            &trans         &trans            &trans                                       &kp SQT
            >;
        };

        NUM {
            bindings = <
&kp LCTRL  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS                                                &kp PAGE_UP       &kp HOME         &kp UP          &kp END            &trans
&trans     &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp PAGE_DOWN     &kp LEFT         &kp DOWN_ARROW  &kp RIGHT          &trans
&trans     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp N0     &kp SLASH                    &kp SLASH       &kp LEFT_BRACKET  &kp LC(PAGE_UP)  &kp LEFT_BRACE  &kp LC(PAGE_DOWN)  &trans
&trans     &kp EQUAL     &kp ASTERISK  &trans        &trans     &kp RA(LS(F4))               &trans          &trans                                                                &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
